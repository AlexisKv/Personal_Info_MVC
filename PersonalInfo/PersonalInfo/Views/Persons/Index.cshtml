
@model IEnumerable<PersonalInfo.Models.Person>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<p>
    <a class="Add-person-button" asp-action="Create">Add Person</a>
</p>
<form asp-controller="Persons" asp-action="Index" method="get">
    <div class="search-allButtons" > 
        <input class="search-button" placeholder="Last Name" type="text" name="SearchString"/>
        <input class="search-button1" type="submit" value="Filter"/>
    </div>
</form>
<table class="table">
    <thead>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>
        <th> Relationship
        </th>
        <th>
            @Html.DisplayNameFor(model => model.BirthDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Address)
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                <!-- Button trigger modal -->
                <button type="button" class="btn-btn-primary @(!string.IsNullOrEmpty(item.Relationship) ? "pointerEventOff" : "")"
                        data-bs-toggle="modal" data-bs-target="#exampleModal-@item.Id">
                    @if (item.IsMerriged == false)
                    {<text>Single</text>}
                    else
                    {
                        {<text>Merried - </text>}@Html.DisplayFor(modelItem => item.Relationship)
                    }
                    @if (string.IsNullOrEmpty(item.Relationship))
                    {
                        <text>Select a partner</text>
                    }
                    <!--Html.DisplayFor(modelItem => item.IsMerriged == false)-->
                </button>

                <!-- Modal -->
                <div class="modal fade" id="exampleModal-@item.Id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">

                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-body">
                                <form autocomplete="off" asp-action="MerrigePopUp" method="post">
                                    <input readonly="readonly" type="hidden" id=@item.Id name="Id" value=@item.Id><br>
                                    <div class="input-spouse">
                                    <label class="Merrige-input" for="MerrigeName input">Spouse:</label><br>
                                    <div class="autocomplete" style="width:300px;">
                                        <input id="MerrigeName" type="text" name="MerrigeName" placeholder="Name">
                                    </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="close-button" data-bs-dismiss="modal">Close</button>
                                        <button type="submit" class="details-button">Save changes</button>
                                    </div>
                                </form>


                                <script>
                            function autocomplete(inp, arr) { 
                              var currentFocus;
                              /*execute a function when someone writes in the text field:*/
                              inp.addEventListener("input", function(e) {
                                  var a, b, i, val = this.value;
                                  /*close any already open lists of autocompleted values*/
                                  closeAllLists();
                                  if (!val) { return false;}
                                  currentFocus = -1;
                                  /*create a DIV element that will contain the items (values):*/
                                  a = document.createElement("DIV");
                                  a.setAttribute("id", this.id + "autocomplete-list");
                                  a.setAttribute("class", "autocomplete-items");
                                  /*append the DIV element as a child of the autocomplete container:*/
                                  this.parentNode.appendChild(a);
                                  /*for each item in the array...*/
                                  for (i = 0; i < arr.length; i++) {
                                    /*check if the item starts with the same letters as the text field value:*/
                                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                                      /*create a DIV element for each matching element:*/
                                      b = document.createElement("DIV");
                                      /*make the matching letters bold:*/
                                      b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                                      b.innerHTML += arr[i].substr(val.length);
                                      /*insert a input field that will hold the current array item's value:*/
                                      b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                                      /*execute a function when someone clicks on the item value (DIV element):*/
                                      b.addEventListener("click", function(e) {
                                          /*insert the value for the autocomplete text field:*/
                                          inp.value = this.getElementsByTagName("input")[0].value;
                                          /*close the list of autocompleted values,
                                          (or any other open lists of autocompleted values:*/
                                          closeAllLists();
                                      });
                                      a.appendChild(b);
                                    }
                                  }
                              });
                              /*execute a function presses a key on the keyboard:*/
                              inp.addEventListener("keydown", function(e) {
                                  var x = document.getElementById(this.id + "autocomplete-list");
                                  if (x) x = x.getElementsByTagName("div");
                                  if (e.keyCode == 40) {
                                    /*If the arrow DOWN key is pressed,
                                    increase the currentFocus variable:*/
                                    currentFocus++;
                                    /*and and make the current item more visible:*/
                                    addActive(x);
                                  } else if (e.keyCode == 38) { //up
                                    /*If the arrow UP key is pressed,
                                    decrease the currentFocus variable:*/
                                    currentFocus--;
                                    /*and and make the current item more visible:*/
                                    addActive(x);
                                  } else if (e.keyCode == 13) {
                                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                                    e.preventDefault();
                                    if (currentFocus > -1) {
                                      /*and simulate a click on the "active" item:*/
                                      if (x) x[currentFocus].click();
                                    }
                                  }
                              });
                              function addActive(x) {
                                /*a function to classify an item as "active":*/
                                if (!x) return false;
                                /*start by removing the "active" class on all items:*/
                                removeActive(x);
                                if (currentFocus >= x.length) currentFocus = 0;
                                if (currentFocus < 0) currentFocus = (x.length - 1);
                                /*add class "autocomplete-active":*/
                                x[currentFocus].classList.add("autocomplete-active");
                              }
                              function removeActive(x) {
                                /*a function to remove the "active" class from all autocomplete items:*/
                                for (var i = 0; i < x.length; i++) {
                                  x[i].classList.remove("autocomplete-active");
                                }
                              }
                              function closeAllLists(elmnt) {
                                /*close all autocomplete lists in the document,
                                except the one passed as an argument:*/
                                var x = document.getElementsByClassName("autocomplete-items");
                                for (var i = 0; i < x.length; i++) {
                                  if (elmnt != x[i] && elmnt != inp) {
                                    x[i].parentNode.removeChild(x[i]);
                                  }
                                }
                              }
                              /*execute a function when someone clicks in the document:*/
                              document.addEventListener("click", function (e) {
                                  closeAllLists(e.target);
                              });
                            }
                            
                            /*An array containing all the country names in the world:*/
                            
                            var countries = ["Ilmārs Ozols ","Edgars Saulīte ", "Alberts Krivecs ", "Olga Hļebs "];
                            /*initiate the autocomplete function on the "MerrigeName" element, and pass along the countries array as possible autocomplete values:*/
                            autocomplete(document.getElementById("MerrigeName"), countries);
                            </script>
                            </div>

                        </div>
                    </div>
                </div>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.BirthDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                <a class="action-button" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a class="action-button" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a class="action-button" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
    }

    </tbody>
</table>
